// Code generated by counterfeiter. DO NOT EDIT.
package variablesfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/variables"
)

type FakePathPicker struct {
	PickPathsStub        func(paths [][]interface{}, requestedPicks int) [][]interface{}
	pickPathsMutex       sync.RWMutex
	pickPathsArgsForCall []struct {
		paths          [][]interface{}
		requestedPicks int
	}
	pickPathsReturns struct {
		result1 [][]interface{}
	}
	pickPathsReturnsOnCall map[int]struct {
		result1 [][]interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePathPicker) PickPaths(paths [][]interface{}, requestedPicks int) [][]interface{} {
	var pathsCopy [][]interface{}
	if paths != nil {
		pathsCopy = make([][]interface{}, len(paths))
		copy(pathsCopy, paths)
	}
	fake.pickPathsMutex.Lock()
	ret, specificReturn := fake.pickPathsReturnsOnCall[len(fake.pickPathsArgsForCall)]
	fake.pickPathsArgsForCall = append(fake.pickPathsArgsForCall, struct {
		paths          [][]interface{}
		requestedPicks int
	}{pathsCopy, requestedPicks})
	fake.recordInvocation("PickPaths", []interface{}{pathsCopy, requestedPicks})
	fake.pickPathsMutex.Unlock()
	if fake.PickPathsStub != nil {
		return fake.PickPathsStub(paths, requestedPicks)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pickPathsReturns.result1
}

func (fake *FakePathPicker) PickPathsCallCount() int {
	fake.pickPathsMutex.RLock()
	defer fake.pickPathsMutex.RUnlock()
	return len(fake.pickPathsArgsForCall)
}

func (fake *FakePathPicker) PickPathsArgsForCall(i int) ([][]interface{}, int) {
	fake.pickPathsMutex.RLock()
	defer fake.pickPathsMutex.RUnlock()
	return fake.pickPathsArgsForCall[i].paths, fake.pickPathsArgsForCall[i].requestedPicks
}

func (fake *FakePathPicker) PickPathsReturns(result1 [][]interface{}) {
	fake.PickPathsStub = nil
	fake.pickPathsReturns = struct {
		result1 [][]interface{}
	}{result1}
}

func (fake *FakePathPicker) PickPathsReturnsOnCall(i int, result1 [][]interface{}) {
	fake.PickPathsStub = nil
	if fake.pickPathsReturnsOnCall == nil {
		fake.pickPathsReturnsOnCall = make(map[int]struct {
			result1 [][]interface{}
		})
	}
	fake.pickPathsReturnsOnCall[i] = struct {
		result1 [][]interface{}
	}{result1}
}

func (fake *FakePathPicker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pickPathsMutex.RLock()
	defer fake.pickPathsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePathPicker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ variables.PathPicker = new(FakePathPicker)
