// Code generated by counterfeiter. DO NOT EDIT.
package variablesfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/variables"
)

type FakePlaceholderPlanter struct {
	PlantPlaceholdersStub        func(manifest *map[interface{}]interface{}, candidates [][]interface{}) (map[string]interface{}, error)
	plantPlaceholdersMutex       sync.RWMutex
	plantPlaceholdersArgsForCall []struct {
		manifest   *map[interface{}]interface{}
		candidates [][]interface{}
	}
	plantPlaceholdersReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	plantPlaceholdersReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlaceholderPlanter) PlantPlaceholders(manifest *map[interface{}]interface{}, candidates [][]interface{}) (map[string]interface{}, error) {
	var candidatesCopy [][]interface{}
	if candidates != nil {
		candidatesCopy = make([][]interface{}, len(candidates))
		copy(candidatesCopy, candidates)
	}
	fake.plantPlaceholdersMutex.Lock()
	ret, specificReturn := fake.plantPlaceholdersReturnsOnCall[len(fake.plantPlaceholdersArgsForCall)]
	fake.plantPlaceholdersArgsForCall = append(fake.plantPlaceholdersArgsForCall, struct {
		manifest   *map[interface{}]interface{}
		candidates [][]interface{}
	}{manifest, candidatesCopy})
	fake.recordInvocation("PlantPlaceholders", []interface{}{manifest, candidatesCopy})
	fake.plantPlaceholdersMutex.Unlock()
	if fake.PlantPlaceholdersStub != nil {
		return fake.PlantPlaceholdersStub(manifest, candidates)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.plantPlaceholdersReturns.result1, fake.plantPlaceholdersReturns.result2
}

func (fake *FakePlaceholderPlanter) PlantPlaceholdersCallCount() int {
	fake.plantPlaceholdersMutex.RLock()
	defer fake.plantPlaceholdersMutex.RUnlock()
	return len(fake.plantPlaceholdersArgsForCall)
}

func (fake *FakePlaceholderPlanter) PlantPlaceholdersArgsForCall(i int) (*map[interface{}]interface{}, [][]interface{}) {
	fake.plantPlaceholdersMutex.RLock()
	defer fake.plantPlaceholdersMutex.RUnlock()
	return fake.plantPlaceholdersArgsForCall[i].manifest, fake.plantPlaceholdersArgsForCall[i].candidates
}

func (fake *FakePlaceholderPlanter) PlantPlaceholdersReturns(result1 map[string]interface{}, result2 error) {
	fake.PlantPlaceholdersStub = nil
	fake.plantPlaceholdersReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakePlaceholderPlanter) PlantPlaceholdersReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.PlantPlaceholdersStub = nil
	if fake.plantPlaceholdersReturnsOnCall == nil {
		fake.plantPlaceholdersReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.plantPlaceholdersReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakePlaceholderPlanter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.plantPlaceholdersMutex.RLock()
	defer fake.plantPlaceholdersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlaceholderPlanter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ variables.PlaceholderPlanter = new(FakePlaceholderPlanter)
