// Code generated by counterfeiter. DO NOT EDIT.
package variablesfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/variables"
)

type FakePathBuilder struct {
	BuildPathsStub        func(obj interface{}) [][]interface{}
	buildPathsMutex       sync.RWMutex
	buildPathsArgsForCall []struct {
		obj interface{}
	}
	buildPathsReturns struct {
		result1 [][]interface{}
	}
	buildPathsReturnsOnCall map[int]struct {
		result1 [][]interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePathBuilder) BuildPaths(obj interface{}) [][]interface{} {
	fake.buildPathsMutex.Lock()
	ret, specificReturn := fake.buildPathsReturnsOnCall[len(fake.buildPathsArgsForCall)]
	fake.buildPathsArgsForCall = append(fake.buildPathsArgsForCall, struct {
		obj interface{}
	}{obj})
	fake.recordInvocation("BuildPaths", []interface{}{obj})
	fake.buildPathsMutex.Unlock()
	if fake.BuildPathsStub != nil {
		return fake.BuildPathsStub(obj)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildPathsReturns.result1
}

func (fake *FakePathBuilder) BuildPathsCallCount() int {
	fake.buildPathsMutex.RLock()
	defer fake.buildPathsMutex.RUnlock()
	return len(fake.buildPathsArgsForCall)
}

func (fake *FakePathBuilder) BuildPathsArgsForCall(i int) interface{} {
	fake.buildPathsMutex.RLock()
	defer fake.buildPathsMutex.RUnlock()
	return fake.buildPathsArgsForCall[i].obj
}

func (fake *FakePathBuilder) BuildPathsReturns(result1 [][]interface{}) {
	fake.BuildPathsStub = nil
	fake.buildPathsReturns = struct {
		result1 [][]interface{}
	}{result1}
}

func (fake *FakePathBuilder) BuildPathsReturnsOnCall(i int, result1 [][]interface{}) {
	fake.BuildPathsStub = nil
	if fake.buildPathsReturnsOnCall == nil {
		fake.buildPathsReturnsOnCall = make(map[int]struct {
			result1 [][]interface{}
		})
	}
	fake.buildPathsReturnsOnCall[i] = struct {
		result1 [][]interface{}
	}{result1}
}

func (fake *FakePathBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildPathsMutex.RLock()
	defer fake.buildPathsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePathBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ variables.PathBuilder = new(FakePathBuilder)
