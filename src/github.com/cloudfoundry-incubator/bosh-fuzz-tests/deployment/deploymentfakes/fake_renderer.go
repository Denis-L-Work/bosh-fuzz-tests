// Code generated by counterfeiter. DO NOT EDIT.
package deploymentfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/deployment"
	bftinput "github.com/cloudfoundry-incubator/bosh-fuzz-tests/input"
)

type FakeRenderer struct {
	RenderStub        func(input bftinput.Input, manifestPath string, cloudConfigPath string) error
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		input           bftinput.Input
		manifestPath    string
		cloudConfigPath string
	}
	renderReturns struct {
		result1 error
	}
	renderReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRenderer) Render(input bftinput.Input, manifestPath string, cloudConfigPath string) error {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		input           bftinput.Input
		manifestPath    string
		cloudConfigPath string
	}{input, manifestPath, cloudConfigPath})
	fake.recordInvocation("Render", []interface{}{input, manifestPath, cloudConfigPath})
	fake.renderMutex.Unlock()
	if fake.RenderStub != nil {
		return fake.RenderStub(input, manifestPath, cloudConfigPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.renderReturns.result1
}

func (fake *FakeRenderer) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeRenderer) RenderArgsForCall(i int) (bftinput.Input, string, string) {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return fake.renderArgsForCall[i].input, fake.renderArgsForCall[i].manifestPath, fake.renderArgsForCall[i].cloudConfigPath
}

func (fake *FakeRenderer) RenderReturns(result1 error) {
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRenderer) RenderReturnsOnCall(i int, result1 error) {
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRenderer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRenderer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployment.Renderer = new(FakeRenderer)
