// Code generated by counterfeiter. DO NOT EDIT.
package deploymentfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/analyzer"
	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/deployment"
)

type FakeStepGenerator struct {
	StepsStub        func(analyzer.Case) []deployment.Step
	stepsMutex       sync.RWMutex
	stepsArgsForCall []struct {
		arg1 analyzer.Case
	}
	stepsReturns struct {
		result1 []deployment.Step
	}
	stepsReturnsOnCall map[int]struct {
		result1 []deployment.Step
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStepGenerator) Steps(arg1 analyzer.Case) []deployment.Step {
	fake.stepsMutex.Lock()
	ret, specificReturn := fake.stepsReturnsOnCall[len(fake.stepsArgsForCall)]
	fake.stepsArgsForCall = append(fake.stepsArgsForCall, struct {
		arg1 analyzer.Case
	}{arg1})
	fake.recordInvocation("Steps", []interface{}{arg1})
	fake.stepsMutex.Unlock()
	if fake.StepsStub != nil {
		return fake.StepsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stepsReturns.result1
}

func (fake *FakeStepGenerator) StepsCallCount() int {
	fake.stepsMutex.RLock()
	defer fake.stepsMutex.RUnlock()
	return len(fake.stepsArgsForCall)
}

func (fake *FakeStepGenerator) StepsArgsForCall(i int) analyzer.Case {
	fake.stepsMutex.RLock()
	defer fake.stepsMutex.RUnlock()
	return fake.stepsArgsForCall[i].arg1
}

func (fake *FakeStepGenerator) StepsReturns(result1 []deployment.Step) {
	fake.StepsStub = nil
	fake.stepsReturns = struct {
		result1 []deployment.Step
	}{result1}
}

func (fake *FakeStepGenerator) StepsReturnsOnCall(i int, result1 []deployment.Step) {
	fake.StepsStub = nil
	if fake.stepsReturnsOnCall == nil {
		fake.stepsReturnsOnCall = make(map[int]struct {
			result1 []deployment.Step
		})
	}
	fake.stepsReturnsOnCall[i] = struct {
		result1 []deployment.Step
	}{result1}
}

func (fake *FakeStepGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stepsMutex.RLock()
	defer fake.stepsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStepGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployment.StepGenerator = new(FakeStepGenerator)
