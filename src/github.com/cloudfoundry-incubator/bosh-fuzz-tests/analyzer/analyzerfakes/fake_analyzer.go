// Code generated by counterfeiter. DO NOT EDIT.
package analyzerfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-fuzz-tests/analyzer"
	bftinput "github.com/cloudfoundry-incubator/bosh-fuzz-tests/input"
)

type FakeAnalyzer struct {
	AnalyzeStub        func(inputs []bftinput.Input) []analyzer.Case
	analyzeMutex       sync.RWMutex
	analyzeArgsForCall []struct {
		inputs []bftinput.Input
	}
	analyzeReturns struct {
		result1 []analyzer.Case
	}
	analyzeReturnsOnCall map[int]struct {
		result1 []analyzer.Case
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAnalyzer) Analyze(inputs []bftinput.Input) []analyzer.Case {
	var inputsCopy []bftinput.Input
	if inputs != nil {
		inputsCopy = make([]bftinput.Input, len(inputs))
		copy(inputsCopy, inputs)
	}
	fake.analyzeMutex.Lock()
	ret, specificReturn := fake.analyzeReturnsOnCall[len(fake.analyzeArgsForCall)]
	fake.analyzeArgsForCall = append(fake.analyzeArgsForCall, struct {
		inputs []bftinput.Input
	}{inputsCopy})
	fake.recordInvocation("Analyze", []interface{}{inputsCopy})
	fake.analyzeMutex.Unlock()
	if fake.AnalyzeStub != nil {
		return fake.AnalyzeStub(inputs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.analyzeReturns.result1
}

func (fake *FakeAnalyzer) AnalyzeCallCount() int {
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	return len(fake.analyzeArgsForCall)
}

func (fake *FakeAnalyzer) AnalyzeArgsForCall(i int) []bftinput.Input {
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	return fake.analyzeArgsForCall[i].inputs
}

func (fake *FakeAnalyzer) AnalyzeReturns(result1 []analyzer.Case) {
	fake.AnalyzeStub = nil
	fake.analyzeReturns = struct {
		result1 []analyzer.Case
	}{result1}
}

func (fake *FakeAnalyzer) AnalyzeReturnsOnCall(i int, result1 []analyzer.Case) {
	fake.AnalyzeStub = nil
	if fake.analyzeReturnsOnCall == nil {
		fake.analyzeReturnsOnCall = make(map[int]struct {
			result1 []analyzer.Case
		})
	}
	fake.analyzeReturnsOnCall[i] = struct {
		result1 []analyzer.Case
	}{result1}
}

func (fake *FakeAnalyzer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAnalyzer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ analyzer.Analyzer = new(FakeAnalyzer)
